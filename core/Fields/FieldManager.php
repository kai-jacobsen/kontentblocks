<?php

namespace Kontentblocks\Fields;

/**
 * FieldManager
 * Purpose of this class:
 * Connecting fields to a module and offering an API to interact with
 * fields and the underlying structure.
 *
 * There are two different cases which are handled by this class:
 * 1) Backend: preparing fields and initiate the rendering of the field output
 * 2) Frontend: Setting fields up.
 *
 * Instantiated by Kontentblocks\Modules\Module if fields() method is present
 * in extending class
 *
 * @see Kontentblocks\Modules\Module::__cosntruct()
 * @param object | Module instance
 */
class FieldManager extends AbstractFieldManager
{

    /**
     * Constructor
     * @param object $module
     * @since 1.0.0
     */
    public function __construct( $module )
    {
        //TODO Check module consistency
        $this->baseId = $module->instance_id;
        $this->data     = $module->moduleData;
        $this->module   = $module;
    }

    /**
     * Creates a new section if there is not already one with the same id
     * or returns the section if exists
     * @param string $id
     * @param array $args
     * @return object groupobject
     * @since 1.0.0
     */
    public function addGroup( $id, $args = array() )
    {
        if ( !$this->idExists( $id ) ) {
            $this->structure[ $id ] = new FieldSection( $id, $args, $this->module->envVars, $this->module );
        }
        return $this->structure[ $id ];

    }



    /**
     * Backend render method | Endpoint
     * output gets generated by attached render object
     * defaults to tabs
     * called by Kontentblocks\Modules\Module::options()
     * if not overridden b extending class
     * @see Kontentblocks\Modules\Module::options
     * TODO: update when options() was renamed
     * @return void
     * @since 1.0.0
     */
    public function renderFields()
    {
        $Renderer = new FieldRenderTabs( $this->structure );
        $Renderer->render( $this->baseId, $this->data );

    }

}
