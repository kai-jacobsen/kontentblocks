<?php

namespace Kontentblocks\Fields;

use Kontentblocks\Modules\Module;
use Reframe\Kontentblocks\Kontentblocks;

/**
 * ModuleFieldController
 * Purpose of this class:
 * Connecting fields to a module and offering an API to interact with
 * fields and the underlying structure.
 *
 * There are two different cases which are handled by this class:
 * 1) Backend: preparing fields and initiate the rendering of the field output
 * 2) Frontend: Setting fields up.
 *
 * Instantiated by Kontentblocks\Modules\Module if fields() method is present
 * in extending class
 *
 * @see Kontentblocks\Modules\Module::__cosntruct()
 * @param \Kontentblocks\Modules\Module
 */
class ModuleFieldController extends AbstractFieldController
{
    public $module;

    /**
     * @var \Kontentblocks\Fields\FieldRendererTabs
     */
    protected $renderEngineClass = 'Kontentblocks\Fields\FieldRendererTabs';

    public $structure;

    /**
     * Constructor
     * @param \Kontentblocks\Modules\Module
     * @since 0.1.0
     */
    public function __construct( Module $module )
    {
        $this->baseId = $module->getId();
        $this->module = $module;
    }

    /**
     * Creates a new section if there is not already one with the same id
     * or returns the section if exists
     * @param string $sectionId
     * @param array $args
     * @param Kontentblocks\Modules\Module
     * @return object
     * @since 0.1.0
     */
    public function addSection( $sectionId, $args = array() )
    {
        if (!$this->idExists( $sectionId )) {
            $this->structure[$sectionId] = new FieldSection(
                $sectionId,
                $args,
                $this->module,
                $this->module->getId()
            );
        }
        return $this->structure[$sectionId];

    }


    /**
     * Backend render method | Endpoint
     * output gets generated by attached render object
     * defaults to tabs
     * called by Kontentblocks\Modules\Module::options()
     * if not overridden b extending class
     * @see Kontentblocks\Modules\Module::form
     * @return string
     * @since 0.1.0
     */
    public function renderFields()
    {
        $Renderer = new $this->renderEngineClass( $this->baseId, $this->structure );
        return $Renderer->render( $this->module->getModel()->getOriginalData() );
    }


    /**
     * set Class which handles form creation for fields
     * @param $class
     */
    public function setRenderEngineClass( $class )
    {
        //@TODO verify against abstract/interface
        $this->renderEngineClass = $class;
    }
}
