<?php

namespace Kontentblocks\Fields;


/**
 * FieldManagerPanels
 * Use ReFields outside of module context
 * WIP
 */
class PanelFieldManager extends AbstractFieldManager {

	/**
	 * Unique ID from module
	 * Used to prefix form fields
	 * @var string
	 */
	protected $baseId;


	protected $Panel;

	/**
	 * Constructor
	 *
	 * @param $id
	 * @param array $data
	 *
	 * @internal param object $module
	 * @return self
	 */
	public function __construct( $id, $data = array(), $Panel ) {
		//TODO Check module consistency
		$this->baseId = $id;
		$this->data   = $data;
		$this->Panel  = $Panel;
	}

	/**
	 * Creates a new section if there is not an exisiting one
	 * or returns the section
	 *
	 * @param string $id
	 * @param array $args
	 *
	 * @return object groupobject
	 */
	public function addGroup( $id, $args = array() ) {
		if ( !$this->idExists( $id ) ) {
			$this->structure[ $id ] = new PanelFieldSection( $id, $args, false, $this->Panel );
		}

		return $this->structure[ $id ];

	}

	public function save( $data, $oldData ) {
		$collection = array();
		foreach ( $this->structure as $definition ) {
			$return     = ( $definition->save( $data, $oldData ) );
			$collection = $collection + $return;
		}

		return $collection;

	}

	/**
	 * Backend render method | Endpoint
	 * output gets generated by attached render object
	 * defaults to tabs
	 * called by Kontentblocks\Modules\Module::options()
	 * if not overridden by extending class
	 * @see Kontentblocks\Modules\Module::options
	 * TODO: update when options() was renamed
	 * @return void
	 */
	public function renderFields() {
		$Renderer = new FieldRenderTabs( $this->structure );
		$Renderer->render( $this->baseId, $this->data );
	}


	/**
	 * @param array $data
	 */
	public function setData( $data ) {
		$this->data = $data;
	}

	public function isPublic() {
		return false;
	}

	/**
	 * Returns the fields data in one flat array
	 * @return array
	 * @TODO: __Revise__
	 */
	public function prepareDataAndGet() {
		$collect = array();
		if ( !empty( $this->fieldsById ) ) {
			foreach ( $this->fieldsById as $field ) {
				$collect[ $field->getKey() ] = $field->getUserValue();
			}

			return $collect;
		}

		return $this->data;
	}
}
