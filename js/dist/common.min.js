/*! kontentblocks 2014-01-08 */
var KB = KB || {};

KB.Ajax = function($) {
    return {
        send: function(data, callback, scope) {
            data.supplemental = data.supplemental || {};
            data.count = parseInt($("#kb_all_blocks").val(), 10);
            data.nonce = $("#_kontentblocks_ajax_nonce").val();
            data.post_id = KB.Screen.post_id;
            data.kbajax = true;
            $(kbMetaBox).addClass("kb_loading");
            $("#publish").attr("disabled", "disabled");
            return $.ajax({
                url: ajaxurl,
                data: data,
                type: "POST",
                dataType: "json",
                success: function(data) {
                    if (data) {
                        if (scope && callback) {
                            callback.call(scope, data);
                        } else if (callback) {
                            callback(data);
                        }
                    }
                },
                error: function() {
                    console.log("error");
                    KB.notice("<p>Generic Ajax Error</p>", "error");
                },
                complete: function() {
                    $(kbMetaBox).removeClass("kb_loading");
                    $("#publish").removeAttr("disabled");
                }
            });
        }
    };
}(jQuery);

var KB = KB || {};

KB.Checks = function($) {
    return {
        blockLimit: function(areamodel) {
            var limit = areamodel.get("limit");
            var children = areamodel.get("assignedModules").length;
            if (limit === 0) {
                return false;
            }
            if (children === limit) {
                return false;
            }
            return true;
        },
        userCan: function(cap) {
            var check = $.inArray(cap, kontentblocks.caps);
            if (check !== -1) {
                return true;
            } else {
                return false;
            }
        }
    };
}(jQuery);

KB.Menus = function($) {
    return {
        loadingContainer: null,
        initiatorEl: null,
        createSanitizedId: function(el) {
            this.initiatorEl = $(el);
            this.loadingContainer = this.initiatorEl.closest(".kb-menu-field").addClass("loading");
            $("#kb-submit").attr("disabled", "disabled");
            KB.Ajax.send({
                inputvalue: el.value,
                action: "getSanitizedId",
                _ajax_nonce: kontentblocks.nonces.read
            }, this.insertId, this);
        },
        insertId: function(res) {
            console.log(res.success === false);
            if (res.success == false) {
                this.initiatorEl.addClass();
                $(".kb-js-area-id").val("Please chose a different name");
            } else {
                $(".kb-js-area-id").val(res);
                $("#kb-submit").removeAttr("disabled");
            }
            this.loadingContainer.removeClass("loading");
        }
    };
}(jQuery);

var KB = KB || {};

KB.Notice = function($) {
    "use strict";
    return {
        notice: function(msg, type) {
            alertify.log(msg, type, 3500);
        },
        confirm: function(msg, yes, no) {
            alertify.confirm(msg, function(e) {
                if (e) {
                    yes();
                } else {
                    no();
                }
            });
        }
    };
}(jQuery);

var KB = KB || {};

KB.Templates = function($) {
    var tmpl_cache = {};
    function getTmplCache() {
        return tmpl_cache;
    }
    function render(tmpl_name, tmpl_data) {
        if (!tmpl_cache[tmpl_name]) {
            var tmpl_dir = kontentblocks.config.url + "js/templates";
            var tmpl_url = tmpl_dir + "/" + tmpl_name + ".html";
            var tmpl_string;
            $.ajax({
                url: tmpl_url,
                method: "GET",
                async: false,
                success: function(data) {
                    tmpl_string = data;
                }
            });
            tmpl_cache[tmpl_name] = _.template(tmpl_string);
        }
        return tmpl_cache[tmpl_name](tmpl_data);
    }
    return {
        render: render
    };
}(jQuery);

var KB = KB || {};

KB.TinyMCE = function($) {
    return {
        removeEditors: function() {
            $(".wp-editor-wrap").each(function() {
                if ($(this).attr("id") === "wp-content-wrap") {} else {
                    var textarea = jQuery(this).find("textarea").attr("id");
                    tinyMCE.execCommand("mceRemoveControl", false, textarea);
                }
            });
        },
        restoreEditors: function() {
            $(".wp-editor-wrap").each(function() {
                var textarea = $(this).find("textarea").attr("id");
                tinyMCE.execCommand("mceAddControl", false, textarea);
                if ($(this).hasClass("html-active")) {
                    $(this).removeClass("html-active").addClass("tmce-active");
                }
            });
        },
        addEditor: function($el) {
            var settings = tinyMCEPreInit.mceInit.content;
            if (!$el) {
                $el = KB.lastAddedModule.view.$el;
                console.log($el);
            }
            $(".wp-editor-area", $el).each(function() {
                var id = this.id;
                settings.elements = id;
                settings.height = 350;
                settings.setup = function(ed) {
                    ed.onInit.add(function() {
                        jQuery(document).trigger("newEditor", ed);
                    });
                };
                tinyMCE.init(settings);
                var qtsettings = {
                    buttons: "",
                    disabled_buttons: "",
                    id: id
                };
                new QTags(qtsettings);
            });
            setTimeout(function() {
                $(".wp-editor-wrap", $el).removeClass("html-active").addClass("tmce-active");
                QTags._buttonsInit();
            }, 1500);
        }
    };
}(jQuery);

var KB = KB || {};

KB.Ui = function($) {
    return {
        isSorting: false,
        init: function() {
            var that = this;
            this.initSortable();
            this.initToggleBoxes();
            this.flexContext();
            jQuery(document).ajaxComplete(function(e, o, settings) {
                that.metaBoxReorder(e, o, settings, "restore");
            });
            jQuery(document).ajaxSend(function(e, o, settings) {
                that.metaBoxReorder(e, o, settings, "remove");
            });
        },
        flexContext: function() {
            var side = $(".area-side");
            var normal = $(".area-normal");
            var stage = $("#kontentblocks_stage");
            var that = this;
            jQuery(".kb_inner").on("mouseover", function() {
                var $con = $(this).closest(".kb-context-container");
                $con.addClass("active-context").removeClass("non-active-context");
                $(".kb-context-container").not($con).addClass("non-active-context").removeClass("active-context");
            });
            jQuery(".kb-toggle", side).click(function() {
                if (that.isSorting) {
                    return false;
                }
                side.addClass("active-context").removeClass("non-active-context");
                normal.addClass("non-active-context");
            });
            jQuery(".kb-toggle", normal).click(function() {
                if (that.isSorting) {
                    return false;
                }
                side.delay(700).removeClass("active-context").addClass("non-active-context");
                normal.delay(700).removeClass("non-active-context").addClass("active-context");
            });
        },
        repaint: function($el) {
            this.initTabs();
            this.initToggleBoxes();
            KB.TinyMCE.addEditor($el);
        },
        initTabs: function() {
            $(".kb_fieldtabs").tabs({
                activate: function() {
                    $(".nano").nanoScroller();
                }
            });
            $(".kb_fieldtabs").each(function() {
                var length = $(".ui-tabs-nav li", $(this)).length;
                if (length === 1) {
                    $(this).find(".ui-tabs-nav").css("display", "none");
                }
            });
        },
        initToggleBoxes: function() {
            $(".kb-togglebox-header").on("click", function() {
                $(this).next("div").slideToggle().toggleClass("kb-toggle-open").end().toggleClass("kb-toggle-open");
            });
            $(".kb_fieldtoggles div:first-child").trigger("click");
        },
        initSortable: function() {
            var currentModule, areaOver;
            var validModule = false;
            var that = this;
            function isValidModule() {
                if (_.indexOf(areaOver.get("assignedModules"), currentModule.get("settings").class) === -1 && areaOver.get("limit") <= filterModulesByArea(areaOver.get("id")).length) {
                    KB.Notice.notice("Not allowed here", "error");
                    return false;
                } else {
                    return true;
                }
            }
            function filterModulesByArea(id) {
                return _.filter(KB.Modules.models, function(model) {
                    return model.get("area").get("id") === id;
                });
            }
            $(".kb_sortable").sortable({
                placeholder: "ui-state-highlight",
                ghost: true,
                connectWith: ".kb_connect",
                handle: ".kb-move",
                cancel: "li.disabled, li.cantsort",
                tolerance: "pointer",
                delay: 150,
                revert: 350,
                start: function(event, ui) {
                    that.isSorting = true;
                    $("#kontentblocks_stage").addClass("kb-is-sorting");
                    currentModule = KB.Modules.get(ui.item.attr("id"));
                    $(KB).trigger("kb:sortable::start");
                    $(".kb-open").toggleClass("kb-open");
                    $(".kb_inner").hide();
                    KB.TinyMCE.removeEditors();
                    $(document).trigger("kb_sortable_start", [ event, ui ]);
                },
                stop: function(event, ui) {
                    that.isSorting = false;
                    $("#kontentblocks_stage").removeClass("kb-is-sorting");
                    var serializedData = [];
                    KB.TinyMCE.restoreEditors();
                    $(document).trigger("kb_sortable_stop", [ event, ui ]);
                    if (currentModule.get("open")) {
                        currentModule.view.toggleBody(155);
                    }
                },
                over: function(event, ui) {
                    areaOver = KB.Areas.get(this.id);
                },
                receive: function(event, ui) {
                    if (!isValidModule()) {
                        KB.Notice.notice("Module not allowed in this area");
                        $(ui.sender).sortable("cancel");
                    }
                },
                update: function(ev, ui) {
                    if (this === ui.item.parent("ul")[0] && !ui.sender) {
                        $.when(that.resort(ui.sender)).done(function() {
                            $(KB).trigger("kb:sortable::update");
                            KB.Notice.notice("Order was updated successfully", "success");
                        });
                    } else if (ui.sender) {
                        $.when(that.changeArea(areaOver, currentModule)).then(function() {
                            that.resort(ui.sender);
                        }).done(function() {
                            that.triggerAreaChange(areaOver, currentModule);
                            $(KB).trigger("kb:sortable::update");
                            KB.Notice.notice("Area change and order were updated successfully", "success");
                        });
                    }
                }
            });
        },
        resort: function(sender) {
            var serializedData = {};
            $(".kb_sortable").each(function() {
                serializedData[this.id] = $("#" + this.id).sortable("serialize", {
                    attribute: "rel"
                });
            });
            return KB.Ajax.send({
                action: "resortModules",
                data: serializedData
            });
        },
        changeArea: function(targetArea, module) {
            return KB.Ajax.send({
                action: "changeArea",
                block_id: module.get("instance_id"),
                area_id: targetArea.get("id"),
                context: targetArea.get("context")
            });
        },
        triggerAreaChange: function(newArea, module) {
            module.set("areaContext", newArea.get("context"));
            module.set("area", newArea.get("id"));
        },
        toggleModule: function() {
            $("body").on("click", ".kb-toggle", function() {
                if (KB.isLocked() && !KB.userCan("lock_kontentblocks")) {
                    KB.notice(kontentblocks.l18n.gen_no_permission, "alert");
                } else {
                    $(this).parent().nextAll(".kb_inner:first").slideToggle("fast", function() {
                        $("body").trigger("module::opened");
                    });
                    $("#" + activeBlock).toggleClass("kb-open", 1e3);
                }
            });
        },
        metaBoxReorder: function(e, o, settings, action) {
            if (settings.data) {
                var a = settings.data;
                var b = a.split("&");
                var result = {};
                $.each(b, function(x, y) {
                    var temp = y.split("=");
                    result[temp[0]] = temp[1];
                });
                if (result.action === "meta-box-order") {
                    if (action === "restore") {
                        KB.restore_tinymce();
                    } else if (action === "remove") {
                        KB.remove_tinymce();
                    }
                }
            }
        }
    };
}(jQuery);