/*! kontentblocks 2014-01-11 */
var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.AreasCollection = Backbone.Collection.extend({});

var KB = KB || {};

KB.ViewsCollection = function() {
    this.views = {};
    this.add = function(id, view) {
        this.views[id] = view;
    };
    this.remove = function(id) {
        var view = this.get(id);
        view.$el.fadeOut(500, function() {
            view.remove();
        });
        delete this.views[id];
    };
    this.get = function(id) {
        if (this.views[id]) {
            return this.views[id];
        }
    };
};

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModulesCollection = Backbone.Collection.extend({});

var KB = KB || {};

KB.Fields = {};

_.extend(KB.Fields, Backbone.Events);

_.extend(KB.Fields, {
    fields: {},
    register: function(id, object) {
        _.extend(object, Backbone.Events);
        this.fields[id] = object;
        if (object.hasOwnProperty("init")) {
            object.init();
        }
        object.listenTo(this, "update", object.update);
    },
    get: function(id) {
        if (this.fields[id]) {
            return this.fields[id];
        } else {
            return null;
        }
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.AreaModel = Backbone.Model.extend({
    idAttribute: "id"
});

var KB = KB || {};

KB.Backbone.ModuleMenuTileModel = Backbone.Model.extend({
    defaults: {
        template: false,
        master: false,
        duplicate: false
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleModel = Backbone.Model.extend({
    idAttribute: "instance_id",
    destroy: function() {
        var that = this;
        KB.Ajax.send({
            action: "removeModules",
            instance_id: that.get("instance_id")
        }, that.destroyed);
    },
    destroyed: function() {},
    setArea: function(area) {
        this.area = area;
    },
    areaChanged: function() {
        this.view.updateModuleForm();
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.AreaModuleMenuView = Backbone.View.extend({
    tilesViews: [],
    initialize: function() {
        var that = this;
        var $tiles = jQuery(".block-nav-item", this.$el);
        if ($tiles.length > 0) {
            _.each($tiles, function(tile) {
                that.tilesViews.push(new KB.Backbone.ModuleMenuTileView({
                    model: new KB.Backbone.ModuleMenuTileModel(jQuery(tile).data()),
                    el: tile,
                    area: that.options.area,
                    parentView: that.options.parentView
                }));
            });
        }
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.AreaView = Backbone.View.extend({
    initialize: function() {
        this.controlsContainer = jQuery(".add-modules", this.$el);
        this.settingsContainer = jQuery(".kb-area-settings-wrapper", this.$el);
        this.modulesList = jQuery("#" + this.model.get("id"), this.$el);
        this.model.view = this;
        this.render();
    },
    events: {
        "click .modules-link": "openModulesMenu",
        "click .js-area-settings-opener": "toggleSettings"
    },
    render: function() {
        this.addControls();
    },
    addControls: function() {
        this.controlsContainer.append(KB.Templates.render("be_areaAddModule", {}));
    },
    openModulesMenu: function(e) {
        e.preventDefault();
        var that = this;
        KB.openedModal = vex.open({
            content: jQuery("#" + that.model.get("id") + "-nav").html(),
            afterOpen: function() {
                KB.menutabs();
                that.menuView = new KB.Backbone.AreaModuleMenuView({
                    el: this.$vexContent,
                    area: that.model.get("id"),
                    parentView: that
                });
            },
            afterClose: function() {
                that.menuView.remove();
            },
            contentClassName: "modules-menu"
        }) || null;
    },
    toggleSettings: function(e) {
        e.preventDefault();
        this.settingsContainer.slideToggle().toggleClass("open");
        KB.currentArea = this.model;
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleMenuItemView = Backbone.View.extend({
    tagName: "div",
    className: "",
    isValid: function() {
        return true;
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleDelete = KB.Backbone.ModuleMenuItemView.extend({
    className: "kb-delete block-menu-icon",
    initialize: function() {
        _.bindAll(this, "yes", "no");
    },
    events: {
        click: "deleteModule"
    },
    deleteModule: function() {
        KB.Notice.confirm("Really?", this.yes, this.no);
    },
    isValid: function() {
        if (!this.model.get("predefined") && !this.model.get("disabled") && KB.Checks.userCan("delete_kontentblocks")) {
            return true;
        } else {
            return false;
        }
    },
    yes: function() {
        KB.Ajax.send({
            action: "removeModules",
            _ajax_nonce: kontentblocks.nonces.delete,
            module: this.model.get("instance_id")
        }, this.success, this);
    },
    no: function() {
        return false;
    },
    success: function() {
        KB.Modules.remove(this.model);
        KB.Notice.notice("Good bye", "success");
        wp.heartbeat.interval("fast", 2);
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleDuplicate = KB.Backbone.ModuleMenuItemView.extend({
    className: "kb-duplicate block-menu-icon",
    events: {
        click: "duplicateModule"
    },
    duplicateModule: function() {
        console.log(this.model);
        KB.Ajax.send({
            action: "duplicateModule",
            module: this.model.get("instance_id"),
            areaContext: this.model.area.get("context"),
            _ajax_nonce: kontentblocks.nonces.create,
            "class": this.model.get("class")
        }, this.success, this);
    },
    isValid: function() {
        if (!this.model.get("predefined") && !this.model.get("disabled") && KB.Checks.userCan("edit_kontentblocks")) {
            return true;
        } else {
            return false;
        }
    },
    success: function(data) {
        if (data === -1) {
            KB.Notice.notice("Request Error", "error");
            return false;
        }
        this.model.area.view.modulesList.append(data.html);
        KB.Modules.add(data.module);
        var count = parseInt(jQuery("#kb_all_blocks").val(), 10) + 1;
        jQuery("#kb_all_blocks").val(count);
        KB.Notice.notice("Module Duplicated", "success");
        KB.Ui.repaint("#" + data.module.instance_id);
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleStatus = KB.Backbone.ModuleMenuItemView.extend({
    initialize: function() {
        var that = this;
        this.options.parent.$el.on("click", ".js-module-status", function(event) {
            that.changeStatus();
        });
    },
    className: "module-status block-menu-icon",
    events: {
        click: "changeStatus"
    },
    changeStatus: function() {
        KB.Ajax.send({
            action: "changeModuleStatus",
            module: this.model.get("instance_id"),
            _ajax_nonce: kontentblocks.nonces.update
        }, this.success, this);
    },
    isValid: function() {
        if (!this.model.get("disabled") && KB.Checks.userCan("deactivate_kontentblocks")) {
            return true;
        } else {
            return false;
        }
    },
    success: function() {
        this.options.parent.$head.toggleClass("module-inactive");
        this.options.parent.$el.toggleClass("kb_inactive");
        this.options.parent.$el.toggleClass("activated deactivated");
        KB.Notice.notice("Status changed", "success");
    }
});

var KB = KB || {};

KB.Backbone.ModuleMenuTileView = Backbone.View.extend({
    events: {
        click: "createModule"
    },
    createModule: function() {
        if (KB.Checks.userCan("create_kontentblocks")) {
            KB.Notice.notice("Yeah", "success");
        } else {
            KB.Notice.notice("Oh well", "error");
        }
        var Area = KB.Areas.get(this.options.area);
        if (KB.Checks.blockLimit(Area)) {
            KB.Notice.notice("Limit for this area reached", "error");
            return false;
        }
        vex.close(KB.openedModal.data().vex.id);
        var data = {
            action: "createNewModule",
            "class": this.model.get("type"),
            master: this.model.get("master"),
            template: this.model.get("template"),
            duplicate: this.model.get("duplicate"),
            areaContext: this.model.get("context"),
            area: this.options.area,
            _ajax_nonce: kontentblocks.nonces.create
        };
        KB.Ajax.send(data, this.success, this);
    },
    success: function(data) {
        this.options.parentView.modulesList.append(data.html);
        KB.lastAddedModule = new KB.Backbone.ModuleModel(data.module);
        KB.Modules.add(KB.lastAddedModule);
        KB.TinyMCE.addEditor();
        var count = parseInt(jQuery("#kb_all_blocks").val(), 10) + 1;
        jQuery("#kb_all_blocks").val(count);
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleMenuView = Backbone.View.extend({
    $menuWrap: null,
    $menuList: null,
    initialize: function() {
        this.$menuWrap = jQuery(".menu-wrap", this.$el);
        this.$menuWrap.append(KB.Templates.render("be_moduleMenu", {}));
        this.$menuList = jQuery(".module-actions", this.$menuWrap);
    },
    addItem: function(view, model) {
        if (view.isValid && view.isValid() === true) {
            var $liItem = jQuery("<li></li>").appendTo(this.$menuList);
            var $menuItem = $liItem.append(view.el);
            this.$menuList.append($menuItem);
        }
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleView = Backbone.View.extend({
    $head: null,
    $body: null,
    ModuleMenu: null,
    instanceId: null,
    events: {
        "click.kb1 .kb-toggle": "toggleBody",
        "click.kb2 .kb-toggle": "setOpenStatus"
    },
    initialize: function() {
        var that = this;
        this.$head = jQuery(".block-head", this.$el);
        this.$body = jQuery(".kb_inner", this.$el);
        this.instanceId = this.model.get("instance_id");
        this.ModuleMenu = new KB.Backbone.ModuleMenuView({
            el: this.$el,
            parent: this
        });
        console.log(store.get(this.instanceId + "_open"));
        if (store.get(this.instanceId + "_open")) {
            this.toggleBody();
            this.model.set("open", true);
        }
        this.model.view = this;
        this.setupDefaultMenuItems();
    },
    setupDefaultMenuItems: function() {
        this.ModuleMenu.addItem(new KB.Backbone.ModuleDuplicate({
            model: this.model,
            parent: this
        }));
        this.ModuleMenu.addItem(new KB.Backbone.ModuleDelete({
            model: this.model,
            parent: this
        }));
        this.ModuleMenu.addItem(new KB.Backbone.ModuleStatus({
            model: this.model,
            parent: this
        }));
    },
    toggleBody: function(speed) {
        var duration = speed || 400;
        if (KB.Checks.userCan("edit_kontentblocks")) {
            this.$body.slideToggle(duration);
            this.$el.toggleClass("kb-open");
            KB.currentModule = this.model;
        }
    },
    setOpenStatus: function() {
        console.log("toggle");
        this.model.set("open", !this.model.get("open"));
        store.set(this.model.get("instance_id") + "_open", this.model.get("open"));
    },
    updateModuleForm: function() {
        KB.Ajax.send({
            action: "afterAreaChange",
            module: this.model.toJSON()
        }, this.insertNewUpdateForm, this);
    },
    insertNewUpdateForm: function(response) {
        if (response !== "") {
            this.$body.html(response);
        } else {
            this.$body.html("empty");
        }
        KB.Ui.repaint(this.$el);
    }
});

var KB = KB || {};

KB.currentModule = {};

KB.currentArea = {};

KB.Views = {
    Modules: new KB.ViewsCollection(),
    Areas: new KB.ViewsCollection(),
    Context: new KB.ViewsCollection()
};

KB.Modules = new KB.Backbone.ModulesCollection([], {
    model: KB.Backbone.ModuleModel
});

KB.Areas = new KB.Backbone.AreasCollection([], {
    model: KB.Backbone.AreaModel
});

KB.App = function($) {
    function init() {
        KB.Modules.on("add", createModuleViews);
        KB.Areas.on("add", createAreaViews);
        KB.Modules.on("remove", removeModule);
        addViews();
        KB.Ui.init();
    }
    function addViews() {
        _.each(KB.RawAreas, function(area) {
            KB.Areas.add(new KB.Backbone.AreaModel(area));
            if (area.modules) {
                _.each(area.modules, function(module) {
                    KB.Modules.add(module);
                });
            }
        });
    }
    function createModuleViews(module) {
        module.setArea(KB.Areas.get(module.get("area")));
        module.bind("change:area", module.areaChanged);
        KB.Views.Modules.add(module.get("instance_id"), new KB.Backbone.ModuleView({
            model: module,
            el: "#" + module.get("instance_id")
        }));
        KB.Ui.initTabs();
    }
    function createAreaViews(area) {
        KB.Views.Areas.add(area.get("id"), new KB.Backbone.AreaView({
            model: area,
            el: "#" + area.get("id") + "-container"
        }));
    }
    function removeModule(model) {
        KB.Views.Modules.remove(model.get("instance_id"));
    }
    return {
        init: init
    };
}(jQuery);

KB.App.init();