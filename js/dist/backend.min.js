/*! kontentblocks 2013-12-26 */
var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.AreasCollection = Backbone.Collection.extend({});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModulesCollection = Backbone.Collection.extend({});

var KB = KB || {};

KB.Fields = {};

_.extend(KB.Fields, Backbone.Events);

_.extend(KB.Fields, {
    fields: {},
    register: function(id, object) {
        _.extend(object, Backbone.Events);
        this.fields[id] = object;
        if (object.hasOwnProperty("init")) {
            object.init();
        }
        object.listenTo(this, "update", object.update);
    },
    get: function(id) {
        if (this.fields[id]) {
            return this.fields[id];
        } else {
            return null;
        }
    }
});

var KB = KB || {};

KB.Ajax = function($) {
    return {
        send: function(data, callback, scope) {
            data.supplemental = data.supplemental || {};
            data.count = parseInt($("#kb_all_blocks").val(), 10);
            data.nonce = $("#_kontentblocks_ajax_nonce").val();
            data.post_id = parseInt($("#post_ID").val(), 10) || -1;
            data.kbajax = true;
            $(kbMetaBox).addClass("kb_loading");
            $("#publish").attr("disabled", "disabled");
            return $.ajax({
                url: ajaxurl,
                data: data,
                type: "POST",
                dataType: "json",
                success: function(data) {
                    if (data) {
                        if (scope && callback) {
                            callback.call(scope, data);
                        } else if (callback) {
                            callback(data);
                        }
                    }
                },
                error: function() {
                    KB.notice("<p>Generic Ajax Error</p>", "error");
                },
                complete: function() {
                    $(kbMetaBox).removeClass("kb_loading");
                    $("#publish").removeAttr("disabled");
                }
            });
        }
    };
}(jQuery);

var KB = KB || {};

KB.Checks = function($) {
    return {
        blockLimit: function(areamodel) {
            var limit = areamodel.get("limit");
            var children = areamodel.get("assignedModules").length;
            if (limit === 0) {
                return false;
            }
            if (children === limit) {
                return false;
            }
            return true;
        },
        userCan: function(cap) {
            var check = $.inArray(cap, kontentblocks.caps);
            if (check !== -1) {
                return true;
            } else {
                return false;
            }
        }
    };
}(jQuery);

var KB = KB || {};

KB.Notice = function($) {
    "use strict";
    return {
        notice: function(msg, type) {
            alertify.log(msg, type, 3500);
        },
        confirm: function(msg, yes, no) {
            alertify.confirm(msg, function(e) {
                if (e) {
                    yes();
                } else {
                    no();
                }
            });
        }
    };
}(jQuery);

var KB = KB || {};

KB.Templates = function($) {
    var tmpl_cache = {};
    function getTmplCache() {
        return tmpl_cache;
    }
    function render(tmpl_name, tmpl_data) {
        if (!tmpl_cache[tmpl_name]) {
            var tmpl_dir = kontentblocks.config.url + "js/templates";
            var tmpl_url = tmpl_dir + "/" + tmpl_name + ".html";
            var tmpl_string;
            $.ajax({
                url: tmpl_url,
                method: "GET",
                async: false,
                success: function(data) {
                    tmpl_string = data;
                }
            });
            tmpl_cache[tmpl_name] = _.template(tmpl_string);
        }
        return tmpl_cache[tmpl_name](tmpl_data);
    }
    return {
        render: render
    };
}(jQuery);

var KB = KB || {};

KB.TinyMCE = function($) {
    return {
        removeEditors: function() {
            $(".wp-editor-wrap").each(function() {
                if ($(this).attr("id") === "wp-content-wrap") {} else {
                    var textarea = jQuery(this).find("textarea").attr("id");
                    tinyMCE.execCommand("mceRemoveControl", false, textarea);
                }
            });
        },
        restoreEditors: function() {
            $(".wp-editor-wrap").each(function() {
                var textarea = $(this).find("textarea").attr("id");
                tinyMCE.execCommand("mceAddControl", false, textarea);
                if ($(this).hasClass("html-active")) {
                    $(this).removeClass("html-active").addClass("tmce-active");
                }
            });
        },
        addEditor: function($el) {
            var settings = tinyMCEPreInit.mceInit.content;
            if (!$el) {
                $el = KB.lastAddedModule.view.$el;
                console.log($el);
            }
            $(".wp-editor-area", $el).each(function() {
                var id = this.id;
                settings.elements = id;
                settings.height = 350;
                settings.setup = function(ed) {
                    ed.onInit.add(function() {
                        jQuery(document).trigger("newEditor", ed);
                    });
                };
                tinyMCE.init(settings);
                var qtsettings = {
                    buttons: "",
                    disabled_buttons: "",
                    id: id
                };
                new QTags(qtsettings);
            });
            setTimeout(function() {
                $(".wp-editor-wrap", $el).removeClass("html-active").addClass("tmce-active");
                QTags._buttonsInit();
            }, 1500);
        }
    };
}(jQuery);

var KB = KB || {};

KB.Ui = function($) {
    return {
        init: function() {
            var that = this;
            this.initSortable();
            this.initToggleBoxes();
            jQuery(document).ajaxComplete(function(e, o, settings) {
                that.metaBoxReorder(e, o, settings, "restore");
            });
            jQuery(document).ajaxSend(function(e, o, settings) {
                that.metaBoxReorder(e, o, settings, "remove");
            });
        },
        repaint: function($el) {
            this.initTabs();
            this.initToggleBoxes();
            KB.TinyMCE.addEditor($el);
        },
        initTabs: function() {
            $(".kb_fieldtabs").tabs({
                activate: function() {
                    $(".nano").nanoScroller();
                }
            });
            $(".kb_fieldtabs").each(function() {
                var length = $(".ui-tabs-nav li", $(this)).length;
                if (length === 1) {
                    $(this).find(".ui-tabs-nav").css("display", "none");
                }
            });
        },
        initToggleBoxes: function() {
            $(".kb-togglebox-header").on("click", function() {
                $(this).next("div").slideToggle().toggleClass("kb-toggle-open").end().toggleClass("kb-toggle-open");
            });
            $(".kb_fieldtoggles div:first-child").trigger("click");
        },
        initSortable: function() {
            var currentModule, areaOver;
            var validModule = false;
            var that = this;
            function isValidModule() {
                if (_.indexOf(areaOver.get("assignedModules"), currentModule.get("settings").class) === -1 && areaOver.get("limit") <= filterModulesByArea(areaOver.get("id")).length) {
                    KB.Notice.notice("Not allowed here", "error");
                    return false;
                } else {
                    return true;
                }
            }
            function filterModulesByArea(id) {
                return _.filter(KB.Modules.models, function(model) {
                    return model.get("area").get("id") === id;
                });
            }
            $(".kb_sortable").sortable({
                placeholder: "ui-state-highlight",
                ghost: true,
                connectWith: ".kb_connect",
                handle: ".kb-move",
                cancel: "li.disabled, li.cantsort",
                tolerance: "pointer",
                delay: 150,
                revert: 350,
                start: function(event, ui) {
                    currentModule = KB.Modules.get(ui.item.attr("id"));
                    currentModule.view.$body.hide();
                    $(".kb-open").toggleClass("kb-open");
                    $(".kb_inner").hide();
                    KB.TinyMCE.removeEditors();
                    $(document).trigger("kb_sortable_start", [ event, ui ]);
                },
                stop: function(event, ui) {
                    var serializedData = [];
                    KB.TinyMCE.restoreEditors();
                    $(document).trigger("kb_sortable_stop", [ event, ui ]);
                },
                over: function(event, ui) {
                    areaOver = KB.Areas.get(this.id);
                },
                receive: function(event, ui) {
                    if (!isValidModule()) {
                        KB.Notice.notice("Module not allowed in this area");
                        $(ui.sender).sortable("cancel");
                    }
                },
                update: function(ev, ui) {
                    if (this === ui.item.parent("ul")[0] && !ui.sender) {
                        $.when(that.resort(ui.sender)).done(function() {
                            KB.Notice.notice("Order was updated successfully", "success");
                        });
                    } else if (ui.sender) {
                        $.when(that.changeArea(areaOver, currentModule)).then(function() {
                            that.resort(ui.sender);
                        }).done(function() {
                            that.triggerAreaChange(areaOver, currentModule);
                            KB.Notice.notice("Area change and order were updated successfully", "success");
                        });
                    }
                }
            });
        },
        resort: function(sender) {
            var serializedData = {};
            $(".kb_sortable").each(function() {
                serializedData[this.id] = $("#" + this.id).sortable("serialize", {
                    attribute: "rel"
                });
            });
            return KB.Ajax.send({
                action: "resortModules",
                data: serializedData
            });
        },
        changeArea: function(targetArea, module) {
            return KB.Ajax.send({
                action: "changeArea",
                block_id: module.get("instance_id"),
                area_id: targetArea.get("id"),
                context: targetArea.get("context")
            });
        },
        triggerAreaChange: function(newArea, module) {
            module.set("areaContext", newArea.get("context"));
            module.set("area", newArea.get("id"));
        },
        toggleModule: function() {
            $("body").on("click", ".kb-toggle", function() {
                if (KB.isLocked() && !KB.userCan("lock_kontentblocks")) {
                    KB.notice(kontentblocks.l18n.gen_no_permission, "alert");
                } else {
                    $(this).parent().nextAll(".kb_inner:first").slideToggle("fast", function() {
                        $("body").trigger("module::opened");
                    });
                    $("#" + activeBlock).toggleClass("kb-open", 1e3);
                }
            });
        },
        metaBoxReorder: function(e, o, settings, action) {
            if (settings.data) {
                var a = settings.data;
                var b = a.split("&");
                var result = {};
                $.each(b, function(x, y) {
                    var temp = y.split("=");
                    result[temp[0]] = temp[1];
                });
                if (result.action === "meta-box-order") {
                    if (action === "restore") {
                        KB.restore_tinymce();
                    } else if (action === "remove") {
                        KB.remove_tinymce();
                    }
                }
            }
        }
    };
}(jQuery);

var KB = KB || {};

KB.ViewsCollection = function() {
    this.views = {};
    this.add = function(id, view) {
        this.views[id] = view;
    };
    this.remove = function(id) {
        var view = this.get(id);
        view.$el.fadeOut(500, function() {
            view.remove();
        });
        delete this.views[id];
    };
    this.get = function(id) {
        if (this.views[id]) {
            return this.views[id];
        }
    };
};

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.AreaModel = Backbone.Model.extend({
    idAttribute: "id"
});

var KB = KB || {};

KB.Backbone.ModuleMenuTileModel = Backbone.Model.extend({
    defaults: {
        template: false,
        master: false,
        duplicate: false
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleModel = Backbone.Model.extend({
    idAttribute: "instance_id",
    destroy: function() {
        var that = this;
        KB.Ajax.send({
            action: "removeModules",
            instance_id: that.get("instance_id")
        }, that.destroyed);
    },
    destroyed: function() {},
    setArea: function(area) {
        this.area = area;
    },
    areaChanged: function() {
        this.view.updateModuleForm();
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.AreaModuleMenuView = Backbone.View.extend({
    tilesViews: [],
    initialize: function() {
        var that = this;
        var $tiles = jQuery(".block-nav-item", this.$el);
        if ($tiles.length > 0) {
            _.each($tiles, function(tile) {
                that.tilesViews.push(new KB.Backbone.ModuleMenuTileView({
                    model: new KB.Backbone.ModuleMenuTileModel(jQuery(tile).data()),
                    el: tile,
                    area: that.options.area,
                    parentView: that.options.parentView
                }));
            });
        }
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.AreaView = Backbone.View.extend({
    initialize: function() {
        this.controlsContainer = jQuery(".add-modules", this.$el);
        this.settingsContainer = jQuery(".kb-area-settings-wrapper", this.$el);
        this.modulesList = jQuery("#" + this.model.get("id"), this.$el);
        this.model.view = this;
        this.render();
    },
    events: {
        "click .modules-link": "openModulesMenu",
        "click .js-area-settings-opener": "toggleSettings"
    },
    render: function() {
        this.addControls();
    },
    addControls: function() {
        this.controlsContainer.append(KB.Templates.render("be_areaAddModule", {}));
    },
    openModulesMenu: function(e) {
        e.preventDefault();
        var that = this;
        KB.openedModal = vex.open({
            content: jQuery("#" + that.model.get("id") + "-nav").html(),
            afterOpen: function() {
                KB.menutabs();
                that.menuView = new KB.Backbone.AreaModuleMenuView({
                    el: this.$vexContent,
                    area: that.model.get("id"),
                    parentView: that
                });
            },
            afterClose: function() {
                that.menuView.remove();
            },
            contentClassName: "modules-menu"
        }) || null;
    },
    toggleSettings: function(e) {
        e.preventDefault();
        this.settingsContainer.slideToggle().toggleClass("open");
        KB.currentArea = this.model;
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleMenuItemView = Backbone.View.extend({
    tagName: "div",
    className: "",
    isValid: function() {
        return true;
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleDelete = KB.Backbone.ModuleMenuItemView.extend({
    className: "kb-delete block-menu-icon",
    initialize: function() {
        _.bindAll(this, "yes", "no");
    },
    events: {
        click: "deleteModule"
    },
    deleteModule: function() {
        KB.Notice.confirm("Really?", this.yes, this.no);
    },
    isValid: function() {
        if (!this.model.get("predefined") && !this.model.get("disabled") && KB.Checks.userCan("delete_kontentblocks")) {
            return true;
        } else {
            return false;
        }
    },
    yes: function() {
        KB.Ajax.send({
            action: "removeModules",
            _ajax_nonce: kontentblocks.nonces.delete,
            module: this.model.get("instance_id")
        }, this.success, this);
    },
    no: function() {
        return false;
    },
    success: function() {
        KB.Modules.remove(this.model);
        KB.Notice.notice("Good bye", "success");
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleDuplicate = KB.Backbone.ModuleMenuItemView.extend({
    className: "kb-duplicate block-menu-icon",
    events: {
        click: "duplicateModule"
    },
    duplicateModule: function() {
        console.log(this.model);
        KB.Ajax.send({
            action: "duplicateModule",
            module: this.model.get("instance_id"),
            areaContext: this.model.area.get("context"),
            _ajax_nonce: kontentblocks.nonces.create,
            "class": this.model.get("class")
        }, this.success, this);
    },
    isValid: function() {
        if (!this.model.get("predefined") && !this.model.get("disabled") && KB.Checks.userCan("edit_kontentblocks")) {
            return true;
        } else {
            return false;
        }
    },
    success: function(data) {
        if (data === -1) {
            KB.Notice.notice("Request Error", "error");
            return false;
        }
        this.model.area.view.modulesList.append(data.html);
        KB.Modules.add(data.module);
        var count = parseInt(jQuery("#kb_all_blocks").val(), 10) + 1;
        jQuery("#kb_all_blocks").val(count);
        KB.Notice.notice("Module Duplicated", "success");
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleStatus = KB.Backbone.ModuleMenuItemView.extend({
    initialize: function() {
        var that = this;
        this.options.parent.$el.on("click", ".js-module-status", function(event) {
            that.changeStatus();
        });
    },
    className: "module-status block-menu-icon",
    events: {
        click: "changeStatus"
    },
    changeStatus: function() {
        KB.Ajax.send({
            action: "changeModuleStatus",
            module: this.model.get("instance_id"),
            _ajax_nonce: kontentblocks.nonces.update
        }, this.success, this);
    },
    isValid: function() {
        if (!this.model.get("disabled") && KB.Checks.userCan("deactivate_kontentblocks")) {
            return true;
        } else {
            return false;
        }
    },
    success: function() {
        this.options.parent.$head.toggleClass("module-inactive");
        this.options.parent.$el.toggleClass("kb_inactive");
        this.options.parent.$el.toggleClass("activated deactivated");
        KB.Notice.notice("Status changed", "success");
    }
});

var KB = KB || {};

KB.Backbone.ModuleMenuTileView = Backbone.View.extend({
    events: {
        click: "createModule"
    },
    createModule: function() {
        if (KB.Checks.userCan("create_kontentblocks")) {
            KB.Notice.notice("Yeah", "success");
        } else {
            KB.Notice.notice("Oh well", "error");
        }
        var Area = KB.Areas.get(this.options.area);
        if (KB.Checks.blockLimit(Area)) {
            KB.Notice.notice("Limit for this area reached", "error");
            return false;
        }
        vex.close(KB.openedModal.data().vex.id);
        var data = {
            action: "createNewModule",
            "class": this.model.get("type"),
            master: this.model.get("master"),
            template: this.model.get("template"),
            duplicate: this.model.get("duplicate"),
            areaContext: this.model.get("context"),
            area: this.options.area,
            _ajax_nonce: kontentblocks.nonces.create
        };
        KB.Ajax.send(data, this.success, this);
    },
    success: function(data) {
        this.options.parentView.modulesList.append(data.html);
        KB.lastAddedModule = new KB.Backbone.ModuleModel(data.module);
        KB.Modules.add(KB.lastAddedModule);
        KB.TinyMCE.addEditor();
        var count = parseInt(jQuery("#kb_all_blocks").val(), 10) + 1;
        jQuery("#kb_all_blocks").val(count);
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleMenuView = Backbone.View.extend({
    $menuWrap: null,
    $menuList: null,
    initialize: function() {
        this.$menuWrap = jQuery(".menu-wrap", this.$el);
        this.$menuWrap.append(KB.Templates.render("be_moduleMenu", {}));
        this.$menuList = jQuery(".module-actions", this.$menuWrap);
    },
    addItem: function(view, model) {
        if (view.isValid && view.isValid() === true) {
            var $liItem = jQuery("<li></li>").appendTo(this.$menuList);
            var $menuItem = $liItem.append(view.el);
            this.$menuList.append($menuItem);
        }
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.ModuleView = Backbone.View.extend({
    $head: null,
    $body: null,
    ModuleMenu: null,
    events: {
        "click .kb-toggle": "toggleBody"
    },
    initialize: function() {
        this.$head = jQuery(".block-head", this.$el);
        this.$body = jQuery(".kb_inner", this.$el);
        this.ModuleMenu = new KB.Backbone.ModuleMenuView({
            el: this.$el,
            parent: this
        });
        this.model.view = this;
        this.setupDefaultMenuItems();
    },
    setupDefaultMenuItems: function() {
        this.ModuleMenu.addItem(new KB.Backbone.ModuleDuplicate({
            model: this.model,
            parent: this
        }));
        this.ModuleMenu.addItem(new KB.Backbone.ModuleDelete({
            model: this.model,
            parent: this
        }));
        this.ModuleMenu.addItem(new KB.Backbone.ModuleStatus({
            model: this.model,
            parent: this
        }));
    },
    toggleBody: function() {
        if (KB.Checks.userCan("edit_kontentblocks")) {
            this.$body.slideToggle();
            this.$el.toggleClass("kb-open");
            KB.currentModule = this.model;
        }
    },
    updateModuleForm: function() {
        KB.Ajax.send({
            action: "afterAreaChange",
            module: this.model.toJSON()
        }, this.insertNewUpdateForm, this);
    },
    insertNewUpdateForm: function(response) {
        console.log(response);
        if (response !== "") {
            this.$body.html(response);
        } else {
            this.$body.html("empty");
        }
        KB.Ui.repaint(this.$el);
    }
});

var KB = KB || {};

KB.currentModule = {};

KB.currentArea = {};

KB.Views = {
    Modules: new KB.ViewsCollection(),
    Areas: new KB.ViewsCollection()
};

KB.Modules = new KB.Backbone.ModulesCollection([], {
    model: KB.Backbone.ModuleModel
});

KB.Areas = new KB.Backbone.AreasCollection([], {
    model: KB.Backbone.AreaModel
});

KB.App = function($) {
    function init() {
        KB.Modules.on("add", createModuleViews);
        KB.Areas.on("add", createAreaViews);
        KB.Modules.on("remove", removeModule);
        addViews();
        KB.Ui.init();
    }
    function addViews() {
        _.each(KB.RawAreas, function(area) {
            KB.Areas.add(new KB.Backbone.AreaModel(area));
            if (area.modules) {
                _.each(area.modules, function(module) {
                    KB.Modules.add(module);
                });
            }
        });
    }
    function createModuleViews(module) {
        module.setArea(KB.Areas.get(module.get("area")));
        module.bind("change:area", module.areaChanged);
        KB.Views.Modules.add(module.get("instance_id"), new KB.Backbone.ModuleView({
            model: module,
            el: "#" + module.get("instance_id")
        }));
        KB.Ui.initTabs();
    }
    function createAreaViews(area) {
        KB.Views.Areas.add(area.get("id"), new KB.Backbone.AreaView({
            model: area,
            el: "#" + area.get("id") + "-container"
        }));
    }
    function removeModule(model) {
        KB.Views.Modules.remove(model.get("instance_id"));
    }
    return {
        init: init
    };
}(jQuery);

KB.App.init();