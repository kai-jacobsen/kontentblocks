/*! kontentblocks 2013-12-25 */
var KB = KB || {};

KB.ModulesCollection = Backbone.Collection.extend({});

var KB = KB || {};

KB.Templates = function($) {
    var tmpl_cache = {};
    function getTmplCache() {
        return tmpl_cache;
    }
    function render(tmpl_name, tmpl_data) {
        if (!tmpl_cache[tmpl_name]) {
            var tmpl_dir = kontentblocks.config.url + "js/templates";
            var tmpl_url = tmpl_dir + "/" + tmpl_name + ".html";
            var tmpl_string;
            $.ajax({
                url: tmpl_url,
                method: "GET",
                async: false,
                success: function(data) {
                    tmpl_string = data;
                }
            });
            tmpl_cache[tmpl_name] = _.template(tmpl_string);
        }
        return tmpl_cache[tmpl_name](tmpl_data);
    }
    return {
        render: render
    };
}(jQuery);

var KB = KB || {};

KB.ModuleModel = Backbone.Model.extend({
    idAttribute: "instance_id",
    save: function(model) {
        var module = model.get("editableModel");
        var el = model.get("editable");
        var dataset = jQuery(el).data();
        dataset.data = jQuery(el).html();
        dataset.postId = module.get("post_id");
        jQuery.ajax({
            url: KBAppConfig.ajaxurl,
            data: {
                action: "saveInlineEdit",
                data: dataset
            },
            type: "POST",
            dataType: "json",
            success: function(data) {
                console.log("sent");
            },
            error: function() {
                console.log("not sent");
            },
            complete: function() {
                console.log("no matter what");
            }
        });
    }
});

var KB = KB || {};

KB.OSConfig = KB.OSConfig || {};

KB.ModuleLayoutControls = Backbone.View.extend({
    initialize: function() {
        this.targetEl = this.options.parent.$el;
        this.render();
    },
    events: {
        "click a.close-controls": "destroy"
    },
    render: function() {
        var that = this;
        this.targetEl.addClass("edit-active");
        this.$el.append(KB.Templates.render("fe_moduleLayoutControls", {
            model: this.model.toJSON()
        }));
        var container = jQuery(".os-controls-container", this.$el);
        container.css("position", "absolute").draggable({
            handle: "h2",
            containment: "window",
            stop: function(eve, ui) {
                KB.OSConfig.Position = ui.position;
            }
        });
        if (KB.OSConfig.Position) {
            container.css({
                top: KB.OSConfig.Position.top,
                left: KB.OSConfig.Position.left
            });
        }
        jQuery("body").append(this.$el);
        this.$el.tabs();
        var mt = that.targetEl.css("marginTop");
        jQuery("#KBMarginTop").ionRangeSlider({
            from: parseInt(mt, 10),
            postfix: "px",
            onChange: function(obj) {
                that.targetEl.css("marginTop", obj.fromNumber);
            }
        });
        var mb = that.targetEl.css("marginBottom");
        jQuery("#KBMarginBottom").ionRangeSlider({
            from: parseInt(mb, 10),
            postfix: "px",
            onChange: function(obj) {
                that.targetEl.css("marginBottom", obj.fromNumber);
            }
        });
    },
    destroy: function() {
        this.targetEl.removeClass("edit-active");
        this.remove();
    }
});

var KB = KB || {};

KB.ModuleView = Backbone.View.extend({
    initialize: function() {
        this.model.bind("save", this.model.save);
        this.model.view = this;
        this.render();
    },
    save: function() {},
    events: {
        "click a.os-edit-block": "openVex",
        "click .editable": "initEtch",
        "click .kb-js-open-layout-controls": "openLayoutControls"
    },
    render: function() {
        console.log("render");
        this.$el.append(KB.Templates.render("module-controls", {
            model: this.model.toJSON()
        }));
    },
    openVex: function() {
        if (KB.OpenOnsite) {
            KB.OpenOnsite.destroy();
        }
        KB.OpenOnsite = new KB.Backbone.OnsiteView({
            tagName: "div",
            id: "onsite-modal",
            model: this.model,
            view: this
        });
    },
    openLayoutControls: function() {
        if (KB.OpenedLayoutControls) {
            KB.OpenedLayoutControls.destroy();
        }
        KB.OpenedLayoutControls = new KB.ModuleLayoutControls({
            tagName: "div",
            id: "slider-unique",
            className: "slider-controls-wrapper",
            model: this.model,
            parent: this
        });
    }
});

var KB = KB || {};

KB.Backbone = KB.Backbone || {};

KB.Backbone.OnsiteView = Backbone.View.extend({
    initialize: function() {
        var that = this;
        jQuery(KB.Templates.render("fe_onsite-form", {
            model: this.model.toJSON()
        })).appendTo(this.$el);
        this.$form = jQuery("#onsite-form", this.$el);
        this.options.timerId = 0;
        this.applyControlsSettings(this.$el);
        this.$el.css("position", "fixed").draggable({
            handle: "h2",
            containment: "window",
            stop: function(eve, ui) {
                KB.OSConfig.OsPosition = ui.position;
            }
        });
        if (KB.OSConfig.OsPosition) {
            this.$el.css({
                top: KB.OSConfig.OsPosition.top,
                left: KB.OSConfig.OsPosition.left
            });
        }
        jQuery(document).on("newEditor", function(e, ed) {
            that.attachEditorEvents(ed);
        });
        jQuery(document).on("KB:osUpdate", function() {
            that.serialize();
        });
        jQuery(document).on("change", ".kb-observe", function() {
            that.serialize();
        });
        this.render();
    },
    events: {
        keyup: "delayInput",
        "click a.close-controls": "destroy",
        "click a.kb-save-form": "serialize"
    },
    render: function() {
        var that = this;
        jQuery("body").append(this.$el);
        KB.lastAddedModule = {
            view: that
        };
        jQuery.ajax({
            url: ajaxurl,
            data: {
                action: "getModuleOptions",
                module: that.model.toJSON(),
                _ajax_nonce: kontentblocks.nonces.read
            },
            type: "POST",
            dataType: "html",
            success: function(res) {
                that.$form.append(res);
                KB.Ui.initTabs();
                KB.Ui.initToggleBoxes();
                KB.TinyMCE.addEditor();
                KB.Fields.trigger("update");
            },
            error: function() {
                console.log("e");
            }
        });
    },
    serialize: function() {
        var that = this;
        tinymce.triggerSave();
        jQuery.ajax({
            url: ajaxurl,
            data: {
                action: "updateModuleOptions",
                data: that.$form.serialize().replace(/\'/g, "%27"),
                module: that.model.toJSON(),
                _ajax_nonce: kontentblocks.nonces.update
            },
            type: "POST",
            dataType: "json",
            success: function(res) {
                that.options.view.$el.html(res.html);
                that.model.set("moduleData", res.newModuleData);
                that.model.view.render();
            },
            error: function() {
                console.log("e");
            }
        });
    },
    delayInput: function() {
        var that = this;
        clearTimeout(this.options.timerId);
        this.options.timerId = setTimeout(function() {
            that.serialize();
        }, 150);
    },
    attachEditorEvents: function(ed) {
        var that = this;
        ed.onKeyUp.add(function() {
            that.delayInput();
        });
    },
    destroy: function() {
        this.remove();
    },
    applyControlsSettings: function($el) {
        var settings = this.model.get("settings");
        if (settings.controls && settings.controls.width) {
            $el.css("width", settings.controls.width + "px");
        }
    }
});

var KB = KB || {};

KB.Frontend = function($) {
    var api = {};
    var Views = [];
    var Collection = new KB.ModulesCollection(KB.PageModules, {
        model: KB.ModuleModel
    });
    _.each(Collection.models, function(model) {
        Views.push(new KB.ModuleView({
            el: "#" + model.get("instance_id"),
            model: model
        }));
    });
    $("body").append(KB.Templates.render("fe_iframe", {}));
    api.Collection = Collection;
    api.Views = Views;
    return api;
}(jQuery);